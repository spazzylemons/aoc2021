(defun read-cave-lines (filename)
  (with-open-file (file filename)
    (let ((lines nil))
      (loop as line = (read-line file nil)
            while line
            do (push (coerce line 'list) lines))
      lines)))

(defun load-cave (filename)
  (let* ((lines (read-cave-lines filename))
         (width (length lines))
         (height (length (car lines)))
         (cave (make-array (list width height)))
         (i (- height 1)))
    (loop while lines
          do (let ((line (car lines))
                   (j 0))
               (loop while line
                     do (setf (aref cave i j) (parse-integer (coerce (list (car line)) 'string)))
                        (incf j)
                        (setq line (cdr line)))
               (decf i)
               (setq lines (cdr lines))))
    cave))

(defun try-neighbor (cave unvisited tentative current i j)
  (when (and (>= i 0) (< i (array-dimension cave 0))
             (>= j 0) (< j (array-dimension cave 1))
             (aref unvisited i j))
    (let* ((tentative-distance (aref tentative i j))
           (calculated-distance (+ current (aref cave i j))))
      (when (or (not tentative-distance)
                (< calculated-distance tentative-distance))
        (setf (aref tentative i j) calculated-distance)))))

(defun find-smallest-tentative (unvisited tentative)
  (let ((i 0) (j 0) (s nil) (si nil) (sj nil) (f nil))
    (loop do (when (aref unvisited i j)
               (setq f (aref tentative i j))
               (when (and f (or (not s) (< f s)))
                 (setq s f)
                 (setq si i)
                 (setq sj j)))
             (incf i)
             (when (= i (array-dimension unvisited 0))
               (setq i 0)
               (incf j)
               (when (= j (array-dimension unvisited 1))
                 (return `(,si . ,sj)))))))

(let* ((cave (load-cave "input"))
       (unvisited (make-array (array-dimensions cave) :initial-element t))
       (tentative (make-array (array-dimensions cave) :initial-element nil))
       (i 0) (j 0))
  (setf (aref tentative 0 0) 0)
  (loop while (aref unvisited (- (array-dimension cave 0) 1) (- (array-dimension cave 1) 1))
        do (let ((current (aref tentative i j)))
             (try-neighbor cave unvisited tentative current (- i 1) j)
             (try-neighbor cave unvisited tentative current (+ i 1) j)
             (try-neighbor cave unvisited tentative current i (- j 1))
             (try-neighbor cave unvisited tentative current i (+ j 1)))
    (setf (aref unvisited i j) nil)
    (let ((spos (find-smallest-tentative unvisited tentative)))
      (setq i (car spos))
      (setq j (cdr spos))))
  (print (aref tentative (- (array-dimension cave 0) 1) (- (array-dimension cave 1) 1))))
