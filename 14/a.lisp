(defun get-pair-insertion (str)
  (values-list (list (list (schar str 0) (schar str 1)) (schar str 6))))

(defun insert-into-polymer (polymer rules)
  (let* ((pair (list (car polymer) (cadr polymer)))
         (insertion (gethash pair rules))
         (next (when (cddr polymer) (cdr polymer))))
    (setf (cdr polymer) `(,insertion . ,(cdr polymer)))
    (when next (insert-into-polymer next rules))))

(with-open-file (file "input")
  (let ((rules (make-hash-table :test #'equal))
        (polymer (coerce (read-line file) 'list)))
    (read-line file)
    (loop as line = (read-line file nil)
          while line
          do (multiple-value-bind (pair insertion) (get-pair-insertion line)
               (setf (gethash pair rules) insertion)))
    (loop for i below 10 do (insert-into-polymer polymer rules))
    (let ((min-count (length polymer)) (max-count 0))
      (loop for element in (remove-duplicates polymer)
            do (let ((current-count (count element polymer)))
                 (when (< current-count min-count)
                   (setq min-count current-count))
                 (when (> current-count max-count)
                   (setq max-count current-count))))
      (format t "~a~%" (- max-count min-count)))))
